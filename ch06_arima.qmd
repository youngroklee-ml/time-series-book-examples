# ARIMA

```{r}
library(tidyverse)
library(tsibble) # time series data frame wrangling
library(fable)   # forecasting models
library(feasts)  # feature extraction, statistics, visualization for time series data
library(readxl)
library(urca)    # for auto arima on linux machine (github action)
```


## Example 6.6

### Load data

```{r}
traffic_ts <- 
  read_excel("data/J17.xlsx") |> 
  set_names(c("date", "traffic")) |> 
  mutate(date = ymd(date)) |> 
  as_tsibble(index = date)
```

### ACF and PACF

Visualize original time series with its ACF and PACF.

```{r}
traffic_ts |> 
  gg_tsdisplay(traffic, plot_type = 'partial')
```


Visualize seasonally differenced time series with it ACF and PACF. Use `difference()` with `lag = 7` to compute week-to-week differences.

```{r}
traffic_ts |> 
  gg_tsdisplay(difference(traffic, lag = 7), plot_type = 'partial')
```

### ARIMA

#### Determine a model from plots

Exponentially decreasing ACF suggests a non-seasonal AR(1), while the significant spike at lag 7 suggests a seasonal MA(1). Use `pdq()` to specify a non-seasonal model and `PDQ()` to specify a seasonal model.

```{r}
arima_fit <- 
  traffic_ts |> 
  model(arima100011 = ARIMA(traffic ~ pdq(1, 0, 0) + PDQ(0, 1, 1)))

report(arima_fit)
```

Visualize residuals.

```{r}
arima_fit |> 
  gg_tsresiduals(type = "innovation", lag_max = 24)
```

Residuals looks distributed around zeros with no trends. Let us conduct Ljung-Box test. Set `dof=2` for two parameters, one from a non-seasonal AR(1) and another from a seasonal MA(1).

```{r}
arima_fit |> 
  augment() |> 
  features(.innov, ljung_box, lag = 24, dof = 2)
```

The p-value is less than 0.05. There may be some opportunities to improve.


#### Auto ARIMA with stepwise search

Let us determine ARIMA model specification based on information criteria.

```{r}
auto_arima_fit <- 
  traffic_ts |> 
  model(auto = ARIMA(traffic))

report(auto_arima_fit)
```

While it still suggests a seasonal MA(1) on seasonally differenced time series, it now suggests a more complex non-seasonal model: ARIMA(2, 0, 2). Let us visualize residuals from this model.

```{r}
auto_arima_fit |> 
  gg_tsresiduals(type = "innovation", lag_max = 24)
```

And conduct Ljung-Box test. Set `dof=5`, four from a non-seasonal ARIMA(2, 0, 2) and another from a seasonal MA(1).

```{r}
auto_arima_fit |> 
  augment() |> 
  features(.innov, ljung_box, lag = 24, dof = 5)
```

The p-value is still less than 0.05.


#### Auto ARIMA with larger parameterization space

Let us determine ARIMA model specification based on information criteria. This process will take a minute.

```{r}
best_arima_fit <- 
  traffic_ts |> 
  model(best = ARIMA(traffic, stepwise = FALSE, approximation = FALSE))

report(best_arima_fit)
```

It now suggests even more complex non-seasonal model: ARIMA(1, 0, 4). Let us visualize residuals from this model.

```{r}
best_arima_fit |> 
  gg_tsresiduals(type = "innovation", lag_max = 24)
```

And conduct Ljung-Box test. Set `dof=6`, five from a non-seasonal ARIMA(1, 0, 4) and another from a seasonal MA(1).

```{r}
best_arima_fit |> 
  augment() |> 
  features(.innov, ljung_box, lag = 24, dof = 6)
```

Now the p-value is greater than 0.05.


## Example 6.11

### Load data

```{r}
nile_flow <- 
  read_excel(
    "data/J09.xlsx", 
    n_max = 99, 
    .name_repair = janitor::make_clean_names
  ) |> 
  mutate(year = 1872:1970) |> 
  as_tsibble(index = year)
```


### Visualize

#### Original series

```{r}
nile_flow |> 
  autoplot(mean_flow)
```

#### Log-transformed series

```{r}
nile_flow |> 
  autoplot(log(mean_flow))
```

#### Box-Cox transformation

$$
w_t = \begin{cases}
\log(y_t) & \text{if } \lambda = 0\\
\left(sign(y_t)\left|y_t\right|^\lambda - 1\right) / \lambda & \text{otherwise}
\end{cases}
$$

Choose $\lambda$ by using `guerreo()` from `{feasts}` package.

```{r}
lambda <- 
  nile_flow |>
  features(mean_flow, features = guerrero) |>
  pull(lambda_guerrero)
```

```{r}
nile_flow |> 
  autoplot(box_cox(mean_flow, lambda))
```


## Example 6.12 - 6.13

### Load data

```{r}
gas_consumption <- read_excel("data/J03.xlsx", skip = 1) |> 
  fill(year, .direction = "down") |> 
  rename(consumption = comsumption) |>  # fix typo in column name
  mutate(year_month = make_yearmonth(year, month), .before = 1L) |> 
  select(!c(year, month)) |> 
  as_tsibble(index = year_month)

gas_consumption
```


### Ex 6.12: Classical decomposition - additive

```{r}
gas_consumption_additive <- 
  gas_consumption |> 
  model(classical_decomposition(consumption, type = "additive"))
```

Extract components by calling `components()` function. It returns `dable` object, which stands for decomposition table.

```{r}
gas_consumption_additive |> 
  components()
```

Plot each components.

```{r}
gas_consumption_additive |> 
  components() |> 
  autoplot()
```


### Ex 6.13: Classical decomposition - multiplicative

```{r}
gas_consumption_multiplicative <- 
  gas_consumption |> 
  model(classical_decomposition(consumption, type = "multiplicative"))
```

```{r}
gas_consumption_multiplicative |> 
  components()
```

```{r}
gas_consumption_multiplicative |> 
  components() |> 
  autoplot()
```

```{r}
gas_consumption_multiplicative |> 
  augment() |> 
  features(.innov, ljung_box, lag = 10)
```


### STL

```{r}
gas_consumption_stl <- 
  gas_consumption |> 
  model(STL(consumption))
```

```{r}
gas_consumption_stl |> 
  components() |> 
  autoplot()
```


```{r}
gas_consumption_stl |> 
  gg_tsresiduals()
```


```{r}
gas_consumption_stl |> 
  augment() |> 
  features(.innov, ljung_box, lag = 10)
```


## Example 6.14

### Load data

Because data is not observed on dates that stock market is closed (e.g. weekends, holidays), data is not regular daily time series. Let us create new index column `t` to denote number of business days.

```{r}
kospi <- 
  read_excel("data/J10.xlsx") |> 
  mutate(Date = as_date(Date)) |> 
  mutate(t = row_number()) |> 
  as_tsibble(index = t)

kospi
```

```{r}
kospi |> 
  gg_tsdisplay(Close, plot_type = "partial")
```

### Unit root test

#### KPSS test

Null hypothesis is that the data are stationary.

```{r}
kospi |> 
  features(Close, unitroot_kpss)
```

It provides p-value less than 0.05, which suggests that the data are not stationary.

Let us see minimum number of differences to make the data be stationary.

```{r}
kospi |> 
  features(Close, unitroot_ndiffs)
```

It suggests one difference to make the data be stationary.

```{r}
kospi |> 
  gg_tsdisplay(difference(Close), plot_type = "partial")
```

